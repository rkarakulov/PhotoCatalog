/// <reference path="../jquery.d.ts" />
/// <reference path="../typings/knockout/knockout.d.ts" />
/// <reference path="../typings/knockout.mapping/knockout.mapping.d.ts" />
/// <reference path="../CraftMobile.d.ts" />
/// <reference path="../jquery.fileupload.d.ts" />
/// <reference path="../jquery.progressbar.d.ts" />
/// <reference path="../jquery.mask.d.ts" />

import importModal = require("Shared/Modal");
import importDataProcessEntryPoint = require("SendSms/DataProcessEntryPointKo");
import importCommon = require("Shared/CommonFunctions");

// Module
export module SendSms {
    // Interfaces
    export interface IFileUploadEntryPoint {
        getModal(): importModal.Shared.IModalWindow;
        getNextButton(): JQuery;
        setDataProcess(dataProcess: importDataProcessEntryPoint.SendSms.DataProcessEntryPoint): void;
    }

    // Class
    export class FileUploadEntryPoint implements IFileUploadEntryPoint {
        modal: importModal.Shared.IModalWindow;
        isExpiredUrl: string;
        expiredUrl: string;
        dataProcess: importDataProcessEntryPoint.SendSms.DataProcessEntryPoint;        
        fileUpload: JQuery;

        constructor() {            
            this.ApplyMasks($(document));
            this.InitCheckingNumberTypeButtons();
            this.InitFormValidation();
            this.InitUploadTypeRadioButtonsClick();
            this.InitFileUploadControl();   

            this.InitProcessDataButtons();

            $('#step1Container').closest('form').data('ajax-success', '');

            var $btnNext = $('#btnNext');
            if ($('#ModelNotValid').length > 0) {
                $btnNext.show();
            } else {
                $btnNext.hide();
            }

            if ($('#UserTypeAddressBook').is(':checked')) {
                $btnNext.show();
            }

            if ($('#UserTypeFromBuffer').is(':checked') && window["userProcessedBufferData"]) {
                $btnNext.show();
            }
        }        

        private InitUploadTypeRadioButtonsClick(): void {
            var self = this;
            $('input[name=UploadType]').click(function (e) {
                self.BlockUnblockUploadTypeDivs();
            });

            this.BlockUnblockUploadTypeDivs();
        }

        private BlockUnblockUploadTypeDivs(): void {
            var UserTypeFromBuffer = $('#UserTypeFromBuffer');
            var UserTypeFromFile = $('#UserTypeFromFile');
            var UserTypeAddressBook = $('#UserTypeAddressBook');

            // блокировка всех span7
            $(':input:not(input[name=UploadType])', $('#step1Container .radio-item:not(.radio-item-blank)')).attr("disabled", true);

            if (UserTypeFromBuffer.is(':checked')) {
                // разблокировка текущего span7
                $(':input', UserTypeFromBuffer.closest(".radio-item").find(".radio-controls")).attr("disabled", false);
                $(':button', UserTypeFromBuffer.closest(".radio-item").find(".radio-buttons")).attr("disabled", false);
            }
            if (UserTypeFromFile.is(':checked')) {
                // разблокировка текущего span7
                $(':input', UserTypeFromFile.closest(".radio-item").find(".radio-controls")).attr("disabled", false);
                $("#divFileUpload > label.fileinput-button").attr("disabled", false);
                $(':button', UserTypeFromFile.closest(".radio-item").find(".radio-buttons")).attr("disabled", false);
            }
            else {
                $("#divFileUpload > label.fileinput-button").attr("disabled", true);
            }
            if (UserTypeAddressBook.is(':checked')) {
                $('#btnNext').show();
                // разблокировка текущего span7
                $(':input', UserTypeAddressBook.closest(".radio-item").find(".radio-controls")).attr("disabled", false);
                $(':button', UserTypeAddressBook.closest(".radio-item").find(".radio-buttons")).attr("disabled", false);
            }
            else {
                $('#btnNext').hide();
            }
        }

        private InitCheckingNumberTypeButtons(): void {
            var _this = this;

            $('div.control-number-block').each(function () {
                var group = $(this);
                var hiddens = $('input[type=hidden]', group.parent());

                $('input[type=button]', group).each(function () {
                    var data = $(this).data('hidden-id');
                    var button = $(this);

                    button.on('click', function () {
                        hiddens.val('False');
                        if (data == 'Both') {
                            hiddens.val('True');
                        } else {
                            $('#' + data).val('True');
                        }
                    });

                    if ($('#SendCheckingNumberFirst').val() == 'True' &&
                        $('#SendCheckingNumberLast').val() == 'True') {
                        if (data == 'Both')
                            button.addClass('active');
                    } else if ($('#SendCheckingNumberFirst').val() == 'True' &&
                        data == 'SendCheckingNumberFirst') {
                        button.addClass('active');
                    } else if ($('#SendCheckingNumberLast').val() == 'True' &&
                        data == 'SendCheckingNumberLast') {
                        button.addClass('active');
                    }
                });
            });
        }

        private InitFileUploadControl(): void {
            var _this = this;
            var fileName = $('#FileName').val();
            if (fileName && fileName != '') {
                $('#uploadResult').show().append(
                    $('<p/>').text('Файл ' + fileName + ' успешно обработан.')
                    );
                $('#progressPercent').hide();
            }

            this.fileUpload = $('#fileupload').fileupload({
                maxFileSize: 104857600,
                dataType: 'json',
                replaceFileInput: false,
                submit: function (e, data) {
                    var go = function () {
                        validationControl.hide();

                        $.getJSON(_this.isExpiredUrl, function (data) {
                            if (data.expired) window.location.href = _this.expiredUrl;
                        });
                    };
                    var e = $("#fileupload")[0];
                    var extensionsStr = e.accept;
                    if (!extensionsStr || extensionsStr.length === 0) {
                        go();
                        return;
                    }
                    var validationControl = $("#fileupload-error");
                    var extensions = extensionsStr.split(',');
                    var extensionRegExp = new RegExp(extensions.join("$|") + "$");
                    if (!e.value.toLowerCase().match(extensionRegExp)) {
                        validationControl.show();
                        validationControl[0].innerHTML = 'Неправильный тип файла. Тип файла должен быть одним из ' + extensionsStr + '. Повторите еще раз.';
                        $("#progressbar").hide();
                        return false;
                    }

                    go();
                },
                done: function (e, data) {
                    if (data.result == null) {
                        return;
                    }

                    $.each(data.result, function (index, file) {
                        $('#uploadResult').show().html('');

                        var p = $('<p/>').html('<span>Файл ' + file.name + ' успешно загружен.<span>&nbsp;');
                        var a = $('<a href="javascript:void(0);" title="Удалить"><i class="icon-remove"></i></a>').appendTo(p);
                        a.on('click', () => { _this.CleanupUploadResult(); _this.getNextButton().hide(); });

                        $('#uploadResult').append(p);
                        $('#btn-process-data').show();
                        $("#progressbar").hide();
                        $('#FileName').val(file.name);
                        $('#divFileUploadSuccess').show();
                        _this.ShowProcessDataDialog();
                    });
                },
                progressall: function (e, data) {
                    var progress = parseInt((data.loaded / data.total * 100).toString(), 10);
                    $("#progressbar").show();
                    $("#progressPercent").css("width", progress + '%');
                    $('#progressPercent').text(progress + '%');
                },
                change: function (e, data) {
                    $('#uploadResult').empty().empty();
                    if (data && data.files && data.files.length > 0) {
                        $("#progressbar").show();
                    }
                    $("#progressPercent").css("width", '0%').empty();
                }
            });

            $("#fileupload").click(() => {
                $('#btnNext').hide();
            });
        }

        private CleanupUploadResult(): void {
            $('#uploadResult').hide().html('');
            $("#progressbar").hide();
            $('#FileName').val('');
            $('#divFileUploadSuccess').show();
            $('#btn-process-data').hide();
            // chrome doesnot fire onchange event if user try to upload the same file
            this.fileUpload.val(null);
        }

        private InitProcessDataButtons(): void {
            var _this = this;

            this.isExpiredUrl = $('#step1Container').data('isexpired-url');
            this.expiredUrl = $('#step1Container').data('expired-url');

            this.modal = new importModal.Shared.ModalWindow('modal-process-data',
                (x) => {
                },
                (params) => {
                }, () => {
                    if (!this.getNextButton().is(':visible')) {
                        this.CleanupUploadResult();
                    }
                });

            var encode = function (text) {
                return $('<div/>').text(text).html();
            }

            $('#btn-process-buffer-data').click(() => {
                window["dataProcessEntryPoint"].currentPage(1);
                this.getNextButton().hide();
                var buffer = $("#Buffer").val();

                if (buffer == "") {
                    $("#buffer-error-message").removeClass();
                    return;
                }
                else {
                    var escapedText = encode(buffer);
                    $("#Buffer").val(escapedText);
                    $("#buffer-error-message").addClass("hide");
                }
                $('#data-process-next-error').hide();
                this.HideColumnAssignStep();
                $('#form-result-container').load(
                    $('#modal-process-data').data('process-data-url'),
                    importCommon.CommonFunctions.SerializeFormToObject($('#step1Container').closest('form'))
                );
                $("#Buffer").val(buffer);
                $('#modal-process-data-file-name').text('');
                this.modal.show(null);
            });

            $('#btn-process-data').click(() => {
                this.getNextButton().hide();
                this.ShowProcessDataDialog();
            });
        }

        private InitFormValidation(): void {

            $("form").validate({
                ignore: "",
                submitHandler: function (form) {
                    // disable fileupload, so it will not be uploaded to the server.
                    $('#fileupload').attr('disabled', 'disabled');
                    form.submit();
                },
                rules: {
                    Buffer: {
                        required: "#UserTypeFromBuffer:checked"
                    },
                    FileName: {
                        required: "#UserTypeFromFile:checked"
                    }
                }
            });
        }

        private HideColumnAssignStep(): void {
            $('div.wizard ul#subStepsBreadcrumbs li.step[data-substep-name="Назначение столбцов"]').hide();
            window["dataProcessEntryPoint"].numberOfPages = parseInt($('#ProcessDataStepNumber').val());
        }

        private ShowColumnAssignStep(): void {
            $('div.wizard ul#subStepsBreadcrumbs li.step[data-substep-name="Назначение столбцов"]').show();
            window["dataProcessEntryPoint"].numberOfPages = parseInt($('#ProcessDataStepNumber').val());
        }

        private ShowProcessDataDialog(): void {
            this.dataProcess.currentPage(1);
            this.ShowColumnAssignStep();

            $('#form-result-container').load(
                $('#modal-process-data').data('process-data-url'),
                $('#step1Container').closest('form').serialize()
            );

            var fileName = $('#FileName').val();
            $('#modal-process-data-file-name').text((fileName && fileName != '') ? '- ' + fileName : '');

            $('#data-process-next-error').hide();
            
            this.modal.show(null);
            $('body').trigger('updateModalPosition');
        }

        private ApplyMasks(container: JQuery) {
            var maskedInputs = container.find('input[data-apply-mask]');
            var options = { translation: { 'Z': "[0-9]?", 'P': "[+]{1}" } };
            maskedInputs.each((i, item) => {
                var template = $(item).data('apply-mask');
                $(item).mask(template, options);
            });
        }

        public getModal(): importModal.Shared.IModalWindow {
            return this.modal;
        }

        public getNextButton(): JQuery {
            return $('#btnNext');
        }

        public setDataProcess(dataProcess: importDataProcessEntryPoint.SendSms.DataProcessEntryPoint): void {
            this.dataProcess = dataProcess;
        }
    }
}


$(function () {
    var fileUploadEntryPoint = new SendSms.FileUploadEntryPoint();
    var numberOfPages = parseInt($('#ProcessDataStepNumber').val());
    window["dataProcessEntryPoint"] = new importDataProcessEntryPoint.SendSms.DataProcessEntryPoint(numberOfPages, fileUploadEntryPoint);
    fileUploadEntryPoint.setDataProcess(window["dataProcessEntryPoint"]);

    var dateFormat = "dd/mm/yy"; // en-gb date format, substitute your own

    $.validator.addMethod('date',
        function (value, element) {
            return true; // since MVC4 data-val-date is put on EVERY vm date property. Default implementation does not allow for multiple cultures...
        });
});

$(function () {
    // unobtrusive validation
    $('#btnNext').click(function () {
        if ($('#wizardform').valid()) {return true; } else {return false; }
    });
});

window.OnDataProcessSuccess = window.OnDataProcessSuccess || function (result: string) {
    // enable unobtrusive validation for the contents
    // that was injected into the <div id="form-result-container"></div> node
    $.validator.unobtrusive.parse($(result));
    window["dataProcessEntryPoint"].onLoadStep();
};