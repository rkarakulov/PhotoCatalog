{
  "name": "xlsx-extract",
  "description": "super-simple async XLSX reader with low memory footprint",
  "homepage": "https://github.com/ffalt/xlsx-extract",
  "keywords": [
    "xlsx",
    "tsv",
    "extract",
    "excel",
    "spreadsheet"
  ],
  "bugs": {
    "url": "https://github.com/ffalt/xlsx-extract/issues"
  },
  "version": "0.0.4",
  "author": {
    "name": "ffalt"
  },
  "bin": {
    "xlsx-extract": "./bin/xlsxe.js"
  },
  "main": "./lib",
  "license": "none",
  "repository": {
    "type": "git",
    "url": "https://github.com/ffalt/xlsx-extract"
  },
  "dependencies": {
    "node-expat": ">= 2.0.0",
    "unzip": ">= 0.1.9",
    "commander": ">= 2.1.0"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "engines": {
    "node": ">= 0.8.15"
  },
  "readmeFilename": "README.md",
  "readme": "# xlsx-extract \r\n\r\n-- extracts data from XLSX files with low memory footprint\r\n\r\n\r\nxlsx-files can get pretty large, so nodejs & full featured xlsx-modules often reach memory limits or just use more than is needed for that task.\r\n\r\n(--max-old-space-size & --stack_size can't help you all the time either)\r\n\r\nhence these magnificent features:\r\n\r\n- filestreams are piped & xml is parsed with sax parser `node-expat`\r\n- get rows/cells each by callback or write them to a .tsv or .json file\r\n- empty lines at the end of the file are ignored\r\n\r\n#Convenience API\r\n\r\n```javascript\r\n\r\n\tvar XLSX = require('xlsx-extract').XLSX;\r\n\r\n\t//dump by row\r\n\tnew XLSX().extract('path/to/file.xlsx', {sheet_nr:1})\r\n\t\t.on('row', function (row) {\r\n\t\t\tconsole.log(row);  //row is a array of values or []\r\n\t\t})\r\n\t\t.on('cell', function (cell) {\r\n\t\t\tconsole.log(cell); //cell is a value or null\r\n\t\t})\r\n\t\t.on('error', function (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t})\r\n\t\t.on('end', function (err) {\r\n\t\t\tconsole.log('eof');\r\n\t\t});\r\n\r\n\t//dump by row in tsv-format\r\n\tnew XLSX().extract('path/to/file.xlsx', {sheet_nr:1, format:'tsv'})\r\n\t\t.on('row', function (row) {\r\n\t\t\tconsole.log(row); //row is a tsv line\r\n\t\t})\r\n\t\t.on('cell', function (cell) {\r\n\t\t\tconsole.log(cell); //cell is a tsv value\r\n\t\t})\r\n\t\t.on('error', function (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t})\r\n\t\t.on('end', function (err) {\r\n\t\t\tconsole.log('eof');\r\n\t\t});\r\n\r\n\t//convert to tsv-file\r\n\tnew XLSX().convert('path/to/file.xlsx', 'path/to/destfile.tsv')\r\n\t\t.on('error', function (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t})\r\n\t\t.on('end', function () {\r\n\t\t\tconsole.log('written');\r\n\t\t})\r\n\r\n\t//convert to json-file\r\n\tnew XLSX().convert('path/to/file.xlsx', 'path/to/destfile.json')\r\n\t\t.on('error', function (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t})\r\n\t\t.on('end', function () {\r\n\t\t\tconsole.log('written');\r\n\t\t})\r\n\r\n\r\n\tdemo_options = {\r\n        sheet_nr: 1, // default 1 - the number of the sheet starting on 1\r\n        ignore_header: 0,  // default 0 - the number of header lines to ignore\r\n        include_empty_rows: false,  // default false - include empty rows in the middle/at start\r\n        date1904: false,    // default false - use date 1904 conversion\r\n        tsv_float_comma: false  // default false - use \",\" als decimal point for floats\r\n        format: '',     // default array - convert to 'array'||'json'||'tsv'||'obj'\r\n        raw_values: false,   // default false - do not apply cell formats (get values as string as in xlsx)\r\n\t\tconvert_values: { // apply cell number formats or not\r\n\t\t\tints: true,  // rounds to int if number format is for int\r\n\t\t\tfloats: true,  // rounds floats according to float number format\r\n\t\t\tdates: true,   // converts xlsx date to js date\r\n\t\t\tbools: true   // converts xlsx bool to js boolean\r\n\t\t}\r\n     };\r\n\r\n\r\n```\r\n\r\n#TODO\r\n\r\n- better error handling\r\n- more testing\r\n- publish to npm\r\n- docu for command-line tool xlsxe\r\n- docu for XLSX.utils\r\n- docu for formats callback\r\n\r\n",
  "_id": "xlsx-extract@0.0.4",
  "_from": "xlsx-extract@"
}
